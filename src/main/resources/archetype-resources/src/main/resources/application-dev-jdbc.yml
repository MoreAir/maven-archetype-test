spring:
  datasource:
      ${artifactId}:
      username: ${artifactId}
      password: ${artifactId}
      driver: oracle.jdbc.OracleDriver
      url: jdbc:oracle:thin:@xxx:1521/xx
    druid:
      connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=500
      filters: stat
      initialSize: 5
      maxActive: 100
      #要启用PSCache，必须配置大于0，当大于0时，poolPreparedStatements自动触发修改为true。在Druid中，不会存在Oracle下PSCache占用内存过多的问题，可以把这个数值配置大一些，比如说100
      maxPoolPreparedStatementPerConnectionSize: 20
      #配置获取连接等待超时的时间,毫秒，配置了maxWait之后，缺省启用公平锁，并发效率会有所下降，如果需要可以通过配置useUnfairLock属性为true使用非公平锁
      maxWait: 60000
      #连接保持空闲而不被驱逐的最小时间，单位是毫秒
      minEvictableIdleTimeMillis: 30000
      #      最小连接数
      minIdle: 5
      #是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。默认false
      poolPreparedStatements: true
      #  单位：秒，检测连接是否有效的超时时间。
      #底层调用jdbc Statement对象的void setQueryTimeout(int seconds)方法,执行validationQuery语句的超时时间
      validationQueryTimeout: 5
      statViewServlet:
        enabled: true
        loginPassword: admin_more
        loginUsername: admin@321
        urlPattern: /druid/*
      #        申请连接时执行validationQuery检测连接是否有效
      testOnBorrow: false
      #      归还连接时执行validationQuery检测连接是否有效
      testOnReturn: false
      #      建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，
      #  如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。
      testWhileIdle: true
      # 有两个含义：
      # 1) Destroy线程会检测连接的间隔时间，如果连接空闲时间大于等于minEvictableIdleTimeMillis则关闭物理连接。
      # 2) testWhileIdle的判断依据，详细看testWhileIdle属性的说明
      timeBetweenEvictionRunsMillis: 60000
      useGlobalDataSourceStat: true
      webStatFilter:
        enabled: true
        exclusions: '*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*'
        profileEnable: true
        sessionStatEnable: true
        urlPattern: /*
    type: com.alibaba.druid.pool.DruidDataSource
  thymeleaf:
    check-template-location: false
